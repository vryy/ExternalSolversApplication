set(EXTERNAL_SOLVERS_APPLICATION_COMPILE_DEFS "")

if(${INCLUDE_PASTIX} MATCHES ON)
    set(${EXCLUDE_ITSOL} ON)
    message("************************** ITSOL NOT COMPILED AS IT IS INCOMPATIBLE WITH PASTIX **************** ")
endif()

set(EXTERNAL_SOLVERS_APPLICATION_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/custom_external_libraries")

# add subdirectories for compilation of dependent libraries
option(ENABLE_SUPERLU "Enable the SuperLU solver" ON)
if(${ENABLE_SUPERLU} MATCHES ON)
    set(EXTERNAL_SOLVERS_APPLICATION_COMPILE_DEFS "${EXTERNAL_SOLVERS_APPLICATION_COMPILE_DEFS};ENABLE_SUPERLU")
    set(EXTERNAL_SOLVERS_APPLICATION_INCLUDE_DIRS "${EXTERNAL_SOLVERS_APPLICATION_INCLUDE_DIRS};${CMAKE_CURRENT_SOURCE_DIR}/custom_external_libraries/SuperLU_4.3")
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/custom_external_libraries/SuperLU_4.3)
endif()

if(${EXCLUDE_ITSOL} MATCHES ON)
    set(EXTERNAL_SOLVERS_APPLICATION_COMPILE_DEFS "${EXTERNAL_SOLVERS_APPLICATION_COMPILE_DEFS};EXCLUDE_ITSOL")
else()
    #for ITSOL
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/custom_external_libraries/ITSOL_2)
    set(EXTERNAL_SOLVERS_APPLICATION_INCLUDE_DIRS "${EXTERNAL_SOLVERS_APPLICATION_INCLUDE_DIRS};${CMAKE_CURRENT_SOURCE_DIR}/custom_external_libraries/ITSOL_2")
    set(EXTERNAL_SOLVERS_APPLICATION_INCLUDE_DIRS "${EXTERNAL_SOLVERS_APPLICATION_INCLUDE_DIRS};${CMAKE_CURRENT_SOURCE_DIR}/custom_external_libraries/ITSOL_2/INC")
endif()

if(${EXCLUDE_AMGCL} MATCHES ON)
    set(EXTERNAL_SOLVERS_APPLICATION_COMPILE_DEFS "${EXTERNAL_SOLVERS_APPLICATION_COMPILE_DEFS};EXCLUDE_AMGCL")
endif()

if(${INCLUDE_PASTIX} MATCHES ON)
    set(EXTERNAL_SOLVERS_APPLICATION_COMPILE_DEFS "${EXTERNAL_SOLVERS_APPLICATION_COMPILE_DEFS};INCLUDE_PASTIX")
    set(EXTERNAL_SOLVERS_APPLICATION_INCLUDE_DIRS "${EXTERNAL_SOLVERS_APPLICATION_INCLUDE_DIRS};${PASTIX_INSTALL_DIR}")
    find_library(PASTIX_LINK_LIB pastix  ${PASTIX_INSTALL_DIR})
    find_library(SCOTCH_ERR_LIB scotcherr ${SCOTCH_INSTALL_DIR})
    find_library(SCOTCH_LIB scotch  ${SCOTCH_INSTALL_DIR})
    message("pastix library found =" ${PASTIX_LINK_LIB})
    set(EXTERNAL_SOLVERS_APPLICATION_COMPILE_DEFS "${EXTERNAL_SOLVERS_APPLICATION_COMPILE_DEFS};FORCE_NOMPI")
    add_library(kratos_pastix STATIC custom_external_libraries/solvePASTIX.c  )
    target_link_libraries(kratos_pastix PUBLIC ${PASTIX_LINK_LIB} ${SCOTCH_LIB} ${SCOTCH_ERR_LIB} rt ${BLAS_LIBRARIES} )
    install(FILES ${SCOTCH_LIB} ${SCOTCH_ERR_LIB} ${BLAS_LIBRARIES} DESTINATION libs )
else()
    set(PASTIX_LINK_LIB "")
endif()

## generate variables with the sources
set( KRATOS_EXTERNAL_SOLVERS_APPLICATION_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/external_includes/amgcl_solver_impl.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/externalsolvers_application.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_linear_solvers_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/externalsolvers_python_application.cpp
)
#
# ###############################################################
add_library(KratosExternalSolversApplicationDependencies INTERFACE)
if(${ENABLE_SUPERLU} MATCHES ON)
    target_link_libraries(KratosExternalSolversApplicationDependencies INTERFACE superlu)
endif()

if(${EXCLUDE_ITSOL} MATCHES ON)
    if(${INCLUDE_PASTIX} MATCHES ON)
        target_link_libraries(KratosExternalSolversApplicationDependencies INTERFACE kratos_pastix rt)
    endif()
else()
    if(${INCLUDE_PASTIX} MATCHES ON)
        target_link_libraries(KratosExternalSolversApplicationDependencies INTERFACE itsol_solvers kratos_pastix rt)
    else()
        target_link_libraries(KratosExternalSolversApplicationDependencies INTERFACE itsol_solvers )
    endif()
endif()

# ## define library Kratos which defines the basic python interface
add_library(KratosExternalSolversApplication SHARED ${KRATOS_EXTERNAL_SOLVERS_APPLICATION_SOURCES})

target_link_libraries(KratosExternalSolversApplication PRIVATE KratosCore)
target_link_libraries(KratosExternalSolversApplication PUBLIC KratosExternalSolversApplicationDependencies)

target_include_directories(KratosExternalSolversApplication PUBLIC ${EXTERNAL_SOLVERS_APPLICATION_INCLUDE_DIRS})

target_compile_definitions(KratosExternalSolversApplication PRIVATE KRATOS_CORE=IMPORT EXTERNAL_SOLVERS_APPLICATION=EXPORT)
target_compile_definitions(KratosExternalSolversApplication PUBLIC ${EXTERNAL_SOLVERS_APPLICATION_COMPILE_DEFS})

set_target_properties(KratosExternalSolversApplication PROPERTIES PREFIX "")

# changing the .dll suffix to .pyd
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set_target_properties(KratosExternalSolversApplication PROPERTIES SUFFIX .pyd)
endif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

# changing the .dylib suffix to .so
if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set_target_properties(KratosExternalSolversApplication PROPERTIES SUFFIX .so)
endif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")

if(${INSTALL_PYTHON_FILES} MATCHES ON)
  get_filename_component (CURRENT_DIR_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
  install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/python_scripts DESTINATION applications/${CURRENT_DIR_NAME}  FILES_MATCHING PATTERN "*.py"  PATTERN ".svn" EXCLUDE)
endif(${INSTALL_PYTHON_FILES} MATCHES ON)

install(TARGETS KratosExternalSolversApplication DESTINATION libs )

# Add to the KratosMultiphisics Python module
install(FILES "${CMAKE_CURRENT_SOURCE_DIR}/ExternalSolversApplication.py" DESTINATION KratosMultiphysics )

#if(${INCLUDE_PASTIX} MATCHES ON)
#   install( TARGETS kratos_pastix DESTINATION libs)
#endif(${INCLUDE_PASTIX} MATCHES ON)
